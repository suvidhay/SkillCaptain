import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.concurrent.ConcurrentHashMap;

public class Main {

    public static void main(String[] args) {

        String directoryPath = "/Users/akashyadav/Desktop/no of words";
        File directory = new File(directoryPath);

        if (!directory.isDirectory()) {
            System.out.println("Provided path doesn't exist");
            return;
        }

        ExecutorService executorService = Executors.newFixedThreadPool(10);
        AtomicInteger totalWordCount = new AtomicInteger(0);
        ConcurrentHashMap<String, Boolean> processedFiles = new ConcurrentHashMap<>();

        for (File file : directory.listFiles()) {
            if (file.isFile() && !processedFiles.containsKey(file.getName())) {

                processedFiles.put(file.getName(), true);
                executorService.submit(() -> {
                    
                    int wordCount = countWordsInFile(file);
                    System.out.println("Word count in " + file.getName() + ": " + wordCount);
                    totalWordCount.addAndGet(wordCount);
                });
            }
        }

        executorService.shutdown();

        while (!executorService.isTerminated()) {
        }

        System.out.println("Total word count in all files: " + totalWordCount.get());
    }

    private static int countWordsInFile(File file) {

        int wordCount = 0;

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;

            while ((line = reader.readLine()) != null) {

                String[] words = line.split("\\s+");
                wordCount += words.length;

            }
        }
        catch (IOException e) {
            e.printStackTrace();
        }

        return wordCount;
    }
}
